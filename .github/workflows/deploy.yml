name: Deploy to ECS Fargate with CodeDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: projects-bhr
  ECS_CLUSTER: strapi-cluster-bhr
  ECS_SERVICE: strapi-service
  TASK_DEFINITION_NAME: strapi-task
  CONTAINER_NAME: strapi
  CODEDEPLOY_APP: strapi-codedeploy-bhr
  DEPLOYMENT_GROUP: strapi-deploy-group
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Push Image & Deploy via CodeDeploy

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and Push Prebuilt Docker Image
        run: |
          docker tag 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Create new Task Definition from Template
        run: |
          sed "s|IMAGE_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|" ecs-task-def.json > task-def-filled.json

      - name: Register Task Definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-filled.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Generate AppSpec file for CodeDeploy
        run: |
          cat <<EOF > appspec.yaml
          version: 1.0
          Resources:
          - TargetService:
            Type: AWS::ECS::Service
            Properties:
            TaskDefinition: $TASK_DEF_ARN
            LoadBalancerInfo:
               ContainerName: ${CONTAINER_NAME}
               ContainerPort: 1337
               EOF

      - name: Deploy with CodeDeploy
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name strapi-app \
            --deployment-group-name strapi-codedeploy-app-bhr \
            --revision revisionType=AppSpecContent,appSpecContent="{content=$(base64 < appspec.yaml | tr -d '\n')}" \
            --query "deploymentId" --output text > deployment-id.txt
          DEPLOYMENT_ID=$(cat deployment-id.txt)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Monitor Deployment Status
        run: |
          for i in {1..30}; do
            STATUS=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query "deploymentInfo.status" --output text)
            echo "Deployment status: $STATUS"
            if [ "$STATUS" == "Succeeded" ]; then
              echo "Deployment succeeded ✅"
              exit 0
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Stopped" ]; then
              echo "Deployment failed ❌ - triggering rollback"
              aws deploy stop-deployment --deployment-id $DEPLOYMENT_ID --auto-rollback-enabled
              exit 1
            fi
            sleep 10
          done
          echo "Deployment timed out ⏱️"
          exit 1
