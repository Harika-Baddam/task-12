name: Deploy Strapi to ECS via CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: "607700977843"
  ECR_REPOSITORY: projects-bhr
  ECS_CLUSTER: strapi-cluster-bhr
  ECS_SERVICE: strapi-service
  TASK_DEF_FAMILY: strapi-task
  CODE_DEPLOY_APP: strapi-codedeploy-bhr
  DEPLOYMENT_GROUP: strapi-deployment-group

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        run: aws ecr get-login-password | docker login --username AWS --password-stdin 607700977843.dkr.ecr.us-east-2.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest .
          docker push 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest

      - name: Set TASK_DEF_NAME
        run: echo "TASK_DEF_NAME=ecs-task-def" >> $GITHUB_ENV
 

      - name: Create new task definition file
        run: |
          aws ecs describe-task-definition \
          --task-definition arn:aws:ecs:us-east-2:607700977843:task-definition/strapi-task:183
          cat ecs-task-def.json | jq --arg IMAGE "607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE | 
             {family: .taskDefinition.family, containerDefinitions: .taskDefinition.containerDefinitions, executionRoleArn: .taskDefinition.executionRoleArn, networkMode: .taskDefinition.networkMode, requiresCompatibilities: .taskDefinition.requiresCompatibilities, cpu: .taskDefinition.cpu, memory: .taskDefinition.memory}' > new-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://ecs-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create appspec.json without EOF
        run: |
          echo "{
            \"version\": 1,
            \"Resources\": [
              {
                \"TargetService\": {
                  \"Type\": \"AWS::ECS::Service\",
                  \"Properties\": {
                    \"TaskDefinition\": \"$TASK_DEF_ARN\",
                    \"LoadBalancerInfo\": {
                      \"ContainerName\": \"$CONTAINER_NAME\",
                      \"ContainerPort\": $CONTAINER_PORT
                    }
                  }
                }
              }
            ]
          }" > appspec.json

      - name: Create CodeDeploy Deployment Group (if not exists)
        run: |
         aws deploy create-deployment-group --application-name strapi-codedeploy-bhr --deployment-group-name strapi-deploy-group --service-role-arn arn:aws:iam::607700977843:role/CodeDeployECSRole --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-style deploymentType=BLUE_GREEN,deploymentOption=WITH_TRAFFIC_CONTROL --blue-green-deployment-configuration "terminateBlueInstancesOnDeploymentSuccess={action=TERMINATE,terminationWaitTimeInMinutes=1},deploymentReadyOption={actionOnTimeout=CONTINUE_DEPLOYMENT},greenFleetProvisioningOption={action=COPY_AUTO_SCALING_GROUP}" --ecs-services serviceName=strapi-service,clusterName=strapi-cluster-bhr --load-balancer-info '{"targetGroupInfoList":[{"name":"strapi-target-group"}]}'
    continue-on-error: true

