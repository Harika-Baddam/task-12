name: Deploy to ECS via CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: strapi-cluster-bhr
  SERVICE_NAME: strapi-service
  TASK_DEF_NAME: strapi-task
  CONTAINER_NAME: strapi
  CONTAINER_PORT: 1337
  DEPLOYMENT_GROUP_NAME: strapi-deploy-group
  DEPLOYMENT_APP_NAME: strapi-codedeploy-app-bhr

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: aws ecr get-login-password | docker login --username AWS --password-stdin 607700977843.dkr.ecr.us-east-2.amazonaws.com

    - name: Build and push Docker image
      run: |
          docker build -t 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest .
          docker push 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest
    - name: Create new Task Definition from Template
      run: |
          sed "s|IMAGE_PLACEHOLDER|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|" ecs-task-def.json > task-def-filled.json

    - name: Register Task Definition
      id: register-task
      run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-filled.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Get new image tag (commit SHA)
      id: new_tag
      run: echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"


    - name: Generate AppSpec file for CodeDeploy
      run: |
          cat <<EOF > appspec.yaml
          version: 1.0
          Resources:
          - TargetService:
            Type: AWS::ECS::Service
            Properties:
            TaskDefinition: $TASK_DEF_ARN
            LoadBalancerInfo:
               ContainerName: ${CONTAINER_NAME}
               ContainerPort: 1337
               EOF
     
    - name: Deploy using CodeDeploy
      run: |

            aws deploy create-deployment `
            --application-name strapi-codedeploy-app-bhr `
            --deployment-group-name strapi-deploy-group-bhr `
            --revision revisionType=AppSpecContent,appSpecContent={\"content\":"\$appspec\"} `
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce


      continue-on-error: true