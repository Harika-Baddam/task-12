name: Deploy to ECS via CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: strapi-cluster-bhr
  SERVICE_NAME: strapi-service
  TASK_DEF_NAME: strapi-task
  CONTAINER_NAME: strapi
  CONTAINER_PORT: 1337
  DEPLOYMENT_GROUP_NAME: strapi-deploy-group
  DEPLOYMENT_APP_NAME: strapi-codedeploy-app-bhr

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get new image tag (commit SHA)
      id: new_tag
      run: echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

    - name: Register new ECS task definition
      id: task_def
      run: |
        task_def=$(aws ecs register-task-definition \
          --cli-input-json file://ecs-task-def.json \
          --query "taskDefinition.taskDefinitionArn" --output text)
        echo "TASK_DEF_ARN=$task_def" >> "$GITHUB_ENV"

    - name: Create appspec.yaml
      run: |
        cat <<EOF > appspec.yaml
        version: 1.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: ${TASK_DEF_ARN}
                LoadBalancerInfo:
                  ContainerName: "${{ env.CONTAINER_NAME }}"
                  ContainerPort: ${{ env.CONTAINER_PORT }}
        EOF
         base64 appspec.yaml | tr -d '\n'
     
    - name: Deploy using CodeDeploy
      run: |
        aws deploy create-deployment-group \
        --application-name strapi-codedeploy-app-bhr \
        --deployment-group-name strapi-deploy-group-bhr \
        --service-role-arn arn:aws:iam::607700977843:role/CodeDeployECSRole \
        --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
        --deployment-style deploymentType=BLUE_GREEN,deploymentOption=WITH_TRAFFIC_CONTROL \
        --blue-green-deployment-configuration "terminateBlueInstancesOnDeploymentSuccess={action=TERMINATE,terminationWaitTimeInMinutes=1},deploymentReadyOption={actionOnTimeout=CONTINUE_DEPLOYMENT},greenFleetProvisioningOption={action=DISCOVER_EXISTING}" \
        --ecs-services serviceName=strapi-service,clusterName=strapi-cluster-bhr \
        --load-balancer-info "targetGroupPairInfoList=[{targetGroups=[{name=blue-target-group-bhr},{name=bhr-target-group-green}],prodTrafficRoute={listenerArns=[arn:aws:elasticloadbalancing:us-east-2:607700977843:listener/app/app-alb-strapi-bhr/016e96a4ff79501a/dafc6f8b21ed172e]}}]"

      continue-on-error: true