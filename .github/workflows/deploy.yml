name: Deploy to ECS via CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: strapi-cluster-bhr
  SERVICE_NAME: strapi-service
  TASK_DEF_NAME: strapi-task
  CONTAINER_NAME: strapi
  CONTAINER_PORT: 1337
  DEPLOYMENT_GROUP_NAME: strapi-deploy-group
  DEPLOYMENT_APP_NAME: strapi-codedeploy-app-bhr

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: aws ecr get-login-password | docker login --username AWS --password-stdin 607700977843.dkr.ecr.us-east-2.amazonaws.com

    - name: Build and push Docker image
      run: |
          docker build -t 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest .
          docker push 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest


    - name: Get new image tag (commit SHA)
      id: new_tag
      run: echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

    - name: Register new ECS task definition
      id: task_def
      run: |
        task_def=$(aws ecs register-task-definition \
          --cli-input-json file://ecs-task-def.json \
          --query "taskDefinition.taskDefinitionArn" --output text)
        echo "TASK_DEF_ARN=$task_def" >> "$GITHUB_ENV"
    - name: Create appspec.yaml
      run: |
        @"
        version: 1.0
        Resources:
        - TargetService:
          Type: AWS::ECS::Service
          Properties:
            TaskDefinition: arn:aws:ecs:us-east-2:607700977843:task-definition/strapi-task:264
            LoadBalancerInfo:
                 ContainerName: strapi
                 ContainerPort: 1337
           "@ | Out-File -Encoding ascii -FilePath "appspec.yaml"
     
    - name: Deploy using CodeDeploy
      run: |
       aws deploy create-deployment `
       --application-name strapi-codedeploy-app-bhr `
       --deployment-group-name strapi-deploy-group-bhr `
       --revision "revisionType=AppSpecContent,appSpecContent={\"content\":\"$appspec.yaml\"}" `
        --deployment-config-name CodeDeployDefault.ECSAllAtOnce

      continue-on-error: true