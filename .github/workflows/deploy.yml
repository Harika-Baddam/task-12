name: Deploy Strapi to ECS via CodeDeploy

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: projects-bhr
  ECS_CLUSTER: strapi-cluster-bhr
  ECS_SERVICE: strapi-service
  TASK_DEF_FAMILY: strapi-task
  CODE_DEPLOY_APP: strapi-codedeploy-app
  DEPLOYMENT_GROUP: strapi-deployment-group

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout source
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push Docker Image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Render new ECS Task Definition with new image
      id: render-taskdef
      uses: aws-actions/amazon-ecs-task-def@v1
      with:
        task-definition: ecs-task-def.json
        container-name: strapi
        image: ${{ env.IMAGE_URI }}

    - name: Register new ECS Task Definition via CLI
      id: register-taskdef
      run: |
        echo "${{ steps.render-taskdef.outputs.task-definition }}" > taskdef.json
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Create CodeDeploy Deployment
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APP }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} \
          --revision revisionType=AppSpecContent,appSpecContent={"content":"version: 1.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: ${{ env.TASK_DEF_ARN }}\n        LoadBalancerInfo:\n          ContainerName: \"strapi\"\n          ContainerPort: 1337"} \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --region us-east-2

    - name: (Optional) Monitor Deployment Status
      run: |
        echo "Deployment created successfully with new image: ${{ env.IMAGE_URI }}"
        # Add polling logic here if needed for prod deployments
