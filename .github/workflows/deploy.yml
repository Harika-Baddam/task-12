ame: Deploy to ECS via CodeDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: strapi-cluster-bhr
  SERVICE_NAME: strapi-service
  APPLICATION_NAME: strapi-codedeploy-app-bhr
  DEPLOYMENT_GROUP_NAME: strapi-deploy-group-bhr
  CONTAINER_NAME: strapi
  ECR_REPO: 607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Commit SHA
        id: vars
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Update ECS Task Definition Image
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition strapi-task \
            --query taskDefinition > task-def.json
          jq '.containerDefinitions[0].image = "607700977843.dkr.ecr.us-east-2.amazonaws.com/projects-bhr:latest"' task-def.json > new-task-def.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' new-task-def.json > final-task-def.json
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
      - name: Base64 encode appspec.yaml
        run: |
          ENCODED_APPSPEC=$(base64 -w 0 appspec.yaml)
          echo "ENCODED_APPSPEC=$ENCODED_APPSPEC" >> $GITHUB_ENV
      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APPLICATION_NAME }} \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision revisionType=AppSpecContent,appSpecContent="{content=${{ env.ENCODED_APPSPEC }}}"
